generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  PREMIUM_USER
}

model User {
  id       String    @id @default(uuid())
  name     String?
  email    String    @unique
  image    String?
  accounts Account[]
  role     UserRole  @default(USER)

  problems       Problem[]
  problemsSolved ProblemSolved[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([provider])
  @@index([type])
}

model Problem {
  id            String          @id @default(uuid())
  title         String
  description   String
  difficulty    String // EASY, MEDIUM, HARD
  tags          String[]
  completed     Boolean         @default(false)
  userId        String
  example       Json // Example input/output/explanation
  constraints   String
  codeSnippet   String?
  testCases     Json // Hidden & public test cases
  hints         String?
  editorial     String?
  problemSolved ProblemSolved[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([difficulty])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  problemId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isSolved  Boolean  @default(false)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
