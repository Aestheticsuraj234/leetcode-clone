{
    "problems": [
      {
        "id": "550e8400-e29b-41d4-a716-446655440000",
        "title": "Two Sum",
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
        "difficulty": "EASY",
        "tags": ["array", "hash-table", "two-pointers"],
        "completed": false,
        "userId": "123e4567-e89b-12d3-a456-426614174000",
        "example": {
          "input": "nums = [2,7,11,15], target = 9",
          "output": "[0,1]",
          "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]. The numbers at indices 0 and 1 add up to the target."
        },
        "constraints": "2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists.",
        "codeSnippet": "function twoSum(nums: number[], target: number): number[] {\n    // Your code here\n}",
        "testCases": {
          "public": [
            {
              "input": "nums = [2,7,11,15], target = 9",
              "output": "[0,1]"
            },
            {
              "input": "nums = [3,2,4], target = 6",
              "output": "[1,2]"
            }
          ],
          "hidden": [
            {
              "input": "nums = [3,3], target = 6",
              "output": "[0,1]"
            },
            {
              "input": "nums = [-1,-2,-3,-4,-5], target = -8",
              "output": "[2,4]"
            }
          ]
        },
        "hints": "1. A really brute force way would be to search for all possible pairs of numbers but that would be too slow.\n2. Try to use the fact that the complement of the current number must exist in the rest of the array.\n3. Could you use extra space to help optimize the runtime?",
        "editorial": "The best way to approach this problem is to use a hash map to store the complement of each number. As we iterate through the array, for each number n, we check if target - n exists in the hash map. If it does, we've found our pair. If not, we add n to the hash map with its index.\n\nThis gives us a time complexity of O(n) and space complexity of O(n).",
        "createdAt": "2024-03-20T10:30:00Z",
        "updatedAt": "2024-03-20T10:30:00Z"
      },
      {
        "id": "550e8400-e29b-41d4-a716-446655440001",
        "title": "Valid Parentheses",
        "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets, and open brackets must be closed in the correct order.",
        "difficulty": "EASY",
        "tags": ["string", "stack"],
        "completed": false,
        "userId": "123e4567-e89b-12d3-a456-426614174000",
        "example": {
          "input": "s = \"()[]{}\"",
          "output": "true",
          "explanation": "The string contains properly matched pairs of brackets in the correct order."
        },
        "constraints": "1 <= s.length <= 104\ns consists of parentheses only '()[]{}'",
        "codeSnippet": "function isValid(s: string): boolean {\n    // Your code here\n}",
        "testCases": {
          "public": [
            {
              "input": "s = \"()[]{}\"",
              "output": "true"
            },
            {
              "input": "s = \"(]\"",
              "output": "false"
            }
          ],
          "hidden": [
            {
              "input": "s = \"([)]\"",
              "output": "false"
            },
            {
              "input": "s = \"{[]}\"",
              "output": "true"
            }
          ]
        },
        "hints": "1. Think about using a stack data structure\n2. The last opening bracket should match the next closing bracket\n3. What happens when you encounter a closing bracket?",
        "editorial": "Use a stack to keep track of opening brackets. When encountering a closing bracket, check if it matches the last opening bracket (top of stack). If it doesn't match or if the stack is empty when encountering a closing bracket, the string is invalid. After processing all characters, the stack should be empty for a valid string.",
        "createdAt": "2024-03-20T11:00:00Z",
        "updatedAt": "2024-03-20T11:00:00Z"
      },
      {
        "id": "550e8400-e29b-41d4-a716-446655440002",
        "title": "Merge k Sorted Lists",
        "description": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
        "difficulty": "HARD",
        "tags": ["linked-list", "divide-and-conquer", "heap", "merge-sort"],
        "completed": false,
        "userId": "123e4567-e89b-12d3-a456-426614174000",
        "example": {
          "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
          "output": "[1,1,2,3,4,4,5,6]",
          "explanation": "The linked-lists are merged in ascending order to form a single sorted list containing all elements."
        },
        "constraints": "k == lists.length\n0 <= k <= 104\n0 <= lists[i].length <= 500\n-104 <= lists[i][j] <= 104\nlists[i] is sorted in ascending order",
        "codeSnippet": "function mergeKLists(lists: Array<ListNode | null>): ListNode | null {\n    // Your code here\n}",
        "testCases": {
          "public": [
            {
              "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
              "output": "[1,1,2,3,4,4,5,6]"
            },
            {
              "input": "lists = []",
              "output": "[]"
            }
          ],
          "hidden": [
            {
              "input": "lists = [[]]",
              "output": "[]"
            },
            {
              "input": "lists = [[1],[2],[3],[4],[5]]",
              "output": "[1,2,3,4,5]"
            }
          ]
        },
        "hints": "1. Compare one by one is too slow\n2. Think about using a min-heap\n3. What about merging two lists at a time?",
        "editorial": "There are several approaches to solve this problem:\n1. Using a Min Heap (Priority Queue): O(N log k) time complexity\n2. Merge lists two at a time: O(N log k) time complexity\n3. Brute Force - merge all into one and sort: O(N log N) time complexity\n\nThe most efficient approach is using a min-heap to always get the smallest element among all lists.",
        "createdAt": "2024-03-20T11:30:00Z",
        "updatedAt": "2024-03-20T11:30:00Z"
      }
    ]
  }